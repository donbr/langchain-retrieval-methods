services:
  qdrant:
    image: qdrant/qdrant:latest
    container_name: langchain_qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__LOG_LEVEL=${QDRANT__LOG_LEVEL}
    networks:
      - langchain_network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G

  redis:
    image: redis:latest
    container_name: langchain_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: [
      "redis-server",
      "--save", "60", "1",
      "--loglevel", "warning",
      "--maxmemory", "1gb",
      "--maxmemory-policy", "allkeys-lru"
    ]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - langchain_network

  postgres:
    image: postgres:latest
    container_name: langchain_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--data-checksums"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - langchain_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  adminer:
    image: adminer:latest
    container_name: langchain_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: ${ADMINER_DESIGN}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - langchain_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 5

  phoenix:
    image: arizephoenix/phoenix:latest
    container_name: langchain_phoenix
    restart: unless-stopped
    ports:
      - "6006:6006"
      - "4317:4317"
    environment:
      - PHOENIX_WORKING_DIR=/mnt/data
      - PHOENIX_SQL_DATABASE_URL=${PHOENIX_SQL_DATABASE_URL}
    volumes:
      - phoenix_data:/mnt/data
    stdin_open: true
    tty: true
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - langchain_network

  minio:
    image: minio/minio:latest
    container_name: langchain_minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}      # Default for dev
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}  # Default for dev
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - langchain_network

  prefect-postgres:
    image: postgres:alpine
    container_name: prefect-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: prefect
      POSTGRES_PASSWORD: prefect
      POSTGRES_DB: prefect_server
    ports:
      - "5433:5432"
    volumes:
      - prefect_postgres_data:/var/lib/postgresql/data
    networks:
      - langchain_network

  prefect-server:
    image: prefecthq/prefect:3-python3.12
    container_name: prefect-server
    depends_on:
      - prefect-postgres
    ports:
      - "4200:4200"
    environment:
      # Tell Prefect where to find the Postgres container:
      PREFECT_API_DATABASE_CONNECTION_URL: >-
        postgresql+asyncpg://prefect:prefect@prefect-postgres:5432/prefect_server
    command: >
      prefect server start
      --host 0.0.0.0
      --port 4200
    networks:
      - langchain_network

  redisinsight:
    image: redis/redisinsight:latest
    container_name: langchain_redisinsight
    restart: unless-stopped
    ports:
      - "5540:5540"
    volumes:
      - redisinsight_data:/data
    networks:
      - langchain_network
    depends_on:
      - redis
    # When connecting to Redis from RedisInsight, use host 'redis' and port '6379' (the service name, not 'localhost')

volumes:
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prefect_postgres_data:
    driver: local
  phoenix_data:
    driver: local
  minio_data:
    driver: local
  redisinsight_data:
    driver: local

networks:
  langchain_network:
    driver: bridge
